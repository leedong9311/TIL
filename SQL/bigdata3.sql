--DAY 4--------------------

SELECT   DEPT_ID ,
         AVG(SALARY)
FROM     EMPLOYEE
GROUP BY DEPT_ID ;

SELECT  DECODE(SUBSTR(EMP_NO,8,1), '1' , '남자' , '여자') AS성별 ,
        ROUND(AVG(SALARY),0)  AS 급여평균
FROM EMPLOYEE
GROUP BY ROLLUP(DECODE(SUBSTR(EMP_NO,8,1),'1' , '남자' , '여자')) ;

SELECT DEPT_ID ,
       EMP_NAME ,
       COUNT(*)
FROM EMPLOYEE
GROUP BY ROLLUP(DEPT_ID , EMP_NAME)
ORDER BY 1

----Q15-----------
SELECT SUBSTR(TERM_NO,1,4) AS 년도,
       SUBSTR(TERM_NO,5,2) AS 학기,
       ROUND(AVG(POINT),1) AS 평점
FROM TB_GRADE
WHERE STUDENT_NO IN 'A112113'
GROUP BY ROLLUP(SUBSTR(TERM_NO,1,4) ,
         (SUBSTR(TERM_NO,5,2))) ;
         
         
---Q13---
SELECT   DEPARTMENT_NO ,
         COUNT(*)
FROM     TB_STUDENT
GROUP BY DEPARTMENT_NO
ORDER BY 1;

---Q12---
SELECT SUBSTR(TERM_NO,1,4),
       ROUND(AVG(POINT),1)
FROM TB_GRADE
WHERE STUDENT_NO IN 'A112113'
GROUP BY SUBSTR(TERM_NO,1,4)
ORDER BY 1

---Q14---
SELECT   STUDENT_NAME AS 동명이름,
         COUNT(STUDENT_NAME) AS "동명인 수"
FROM     TB_STUDENT
GROUP BY STUDENT_NAME
HAVING COUNT(STUDENT_NAME) >1
ORDER BY 1

---HAVING---
SELECT DEPT_ID ,
       SUM(SALARY)
FROM EMPLOYEE
GROUP BY DEPT_ID
HAVING SUM(SALARY) > 9000000;

SELECT DEPT_ID ,
       SUM(SALARY)
FROM EMPLOYEE
WHERE SUM(SALARY) > 9000000
GROUP BY DEPT_ID


--분석함수() OVER(PARTITION BY , ORDER BY)
--ROW_NUMBER()
SELECT DEPT_ID ,
       EMP_NAME ,
       ROW_NUMBER() OVER(PARTITION BY DEPT_ID ORDER BY DEPT_ID) AS "ROWNUM"
FROM EMPLOYEE

-- RANK() , DENSE_RANK()
--부서별 급여 순위 조회

SELECT  DEPT_ID,
        EMP_NAME ,
        SALARY ,
        RANK() OVER(PARTITION BY DEPT_ID ORDER BY SALARY) "RANK"
FROM EMPLOYEE ;

--CUME_DIST() 상대적 누적분포
--PERCENT_RANK() 백분율

SELECT  DEPT_ID,
        EMP_NAME ,
        SALARY ,
        CUME_DIST() OVER(PARTITION BY DEPT_ID ORDER BY SALARY) "RANK"
FROM EMPLOYEE ;

-----------------
SELECT *
FROM DEPARTMENT ;

SELECT *
FROM EMPLOYEE ;

SELECT EMP_NAME ,
       DEPT_NAME 
FROM EMPLOYEE E, DEPARTMENT D
WHERE E.DEPT_ID = D.DEPT_ID

SELECT EMP_NAME , 
       DEPT_NAME , 
       LOC_DESCRIBE
FROM EMPLOYEE E, DEPARTMENT D, LOCATION L
WHERE E.DEPT_ID = D.DEPT_ID
AND L.LOCATION_ID = D.LOC_ID ;

-----------------------
--JOIN 구문 정리 
--JOIN ~ON(조건식)
--JOIN ~USING(기준컬럼)
SELECT EMP_NAME , 
       DEPT_NAME , 
       LOC_DESCRIBE ,
       COUNTRY_NAME 
FROM EMPLOYEE E
FULL JOIN DEPARTMENT D USING(DEPT_ID)
FULL JOIN LOCATION L ON (L.LOCATION_ID = D.LOC_ID)
FULL JOIN COUNTRY C USING(COUNTRY_ID) ;

SELECT E.EMP_NAME AS 직원,
       M.EMP_NAME AS 관리자 ,
       S.EMP_NAME AS CEO
FROM EMPLOYEE E
LEFT JOIN EMPLOYEE M ON(E.MGR_ID = M.EMP_ID)
LEFT JOIN EMPLOYEE S ON(M.MGR_ID = S.EMP_ID)

--직원 급여등급을 알아볼려고 한다
-- SAL_GRADE 테이블을 참조하여 이름, 급여, 급여등급(SLEVEL)

SELECT EMP_NAME AS 이름 ,
       SALARY AS 급여 ,
       SLEVEL AS 급여등급
FROM EMPLOYEE E , SAL_GRADE S
WHERE SALARY BETWEEN S.LOWEST AND S.HIGHEST ;

SELECT EMP_NAME AS 이름 ,
       SALARY AS 급여 ,
       SLEVEL AS 급여등급
FROM EMPLOYEE E 
JOIN SAL_GRADE S ON(SALARY BETWEEN S.LOWEST AND S.HIGHEST) 
ORDER BY 2 DESC ;


SELECT EMP_NAME ,
       JOB_TITLE 
FROM EMPLOYEE E, JOB J
WHERE J.JOB_ID = E.JOB_ID ;


---Q1---
SELECT STUDENT_NAME AS "학생 이름" ,
       STUDENT_ADDRESS AS 주소지
FROM TB_STUDENT
ORDER BY 1

---Q2---
SELECT STUDENT_NAME ,
       STUDENT_SSN
FROM TB_STUDENT
WHERE ABSENCE_YN IN ('Y')
ORDER BY 2 DESC

---Q3---
SELECT STUDENT_NAME AS 학생이름,
       STUDENT_NO AS 학번,
       STUDENT_ADDRESS AS "거주지 주소"
FROM TB_STUDENT
WHERE SUBSTR(ENTRANCE_DATE,1,1) IN ('9')
AND SUBSTR(STUDENT_ADDRESS,1,3) IN ('강원도','경기도')
ORDER BY 1

---Q4---
SELECT PROFESSOR_NAME ,
       PROFESSOR_SSN 
FROM TB_PROFESSOR
WHERE DEPARTMENT_NO IN (005)
ORDER BY 2

---Q5---
SELECT STUDENT_NO ,
       POINT 
FROM TB_GRADE
WHERE CLASS_NO IN ('C3118100')
AND   TERM_NO IN (200402)
ORDER BY 2 DESC , 1

---Q6---
SELECT STUDENT_NO ,
       STUDENT_NAME ,
       DEPARTMENT_NAME
FROM TB_STUDENT S , TB_DEPARTMENT T
WHERE S.DEPARTMENT_NO = T.DEPARTMENT_NO
ORDER BY 2 DESC

---Q7---
SELECT CLASS_NAME ,
       DEPARTMENT_NAME
FROM TB_DEPARTMENT D , TB_CLASS C
WHERE D.DEPARTMENT_NO = C.DEPARTMENT_NO

---Q8---
SELECT CLASS_NAME ,
       PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_CLASS_PROFESSOR P ON (C.CLASS_NO = P.CLASS_NO)
JOIN TB_PROFESSOR R ON (P.PROFESSOR_NO = R.PROFESSOR_NO)
ORDER BY 2

---Q9---
SELECT CLASS_NAME ,
       PROFESSOR_NAME
FROM TB_CLASS C
JOIN TB_CLASS_PROFESSOR P ON (C.CLASS_NO = P.CLASS_NO)
JOIN TB_PROFESSOR R ON (P.PROFESSOR_NO = R.PROFESSOR_NO)
JOIN TB_DEPARTMENT D ON (D.DEPARTMENT_NO = R.DEPARTMENT_NO)
WHERE D.CATEGORY IN ('인문사회')

---Q10---
SELECT STUDENT_NO AS 학번 ,
       STUDENT_NAME AS "학생 이름" ,
       ROUND(AVG(POINT),1) AS "전체 평점"
FROM TB_STUDENT S 
JOIN TB_DEPARTMENT D USING (DEPARTMENT_NO)
JOIN TB_GRADE G USING (STUDENT_NO)
WHERE D.DEPARTMENT_NAME IN ('음악학과')
GROUP BY STUDENT_NO ,STUDENT_NAME
ORDER BY 1

---Q11---
SELECT DEPARTMENT_NAME AS "학과 이름" ,
       STUDENT_NAME ,
       PROFESSOR_NAME
FROM TB_DEPARTMENT D
JOIN TB_STUDENT S USING (DEPARTMENT_NO)
JOIN TB_PROFESSOR P ON (P.PROFESSOR_NO =S.COACH_PROFESSOR_NO)
WHERE STUDENT_NO = 'A313047'

---Q12---
SELECT STUDENT_NAME ,
       TERM_NO
FROM TB_STUDENT S
JOIN TB_GRADE G USING (STUDENT_NO)
JOIN TB_CLASS C USING (CLASS_NO)
WHERE CLASS_NAME IN ('인간관계론')
AND SUBSTR(TERM_NO,1,4) IN (2007)
ORDER BY 1

---Q13---
SELECT CLASS_NAME ,
    DEPARTMENT_NAME ,
    PROFESSOR_NAME
FROM TB_DEPARTMENT D
JOIN TB_CLASS C ON (C.DEPARTMENT_NO = D.DEPARTMENT_NO)
JOIN TB_CLASS_PROFESSOR CP ON (C.CLASS_NO = CP.CLASS_NO)
JOIN TB_PROFESSOR P ON (CP.PROFESSOR_NO = P.PROFESSOR_NO)
WHERE CATEGORY IN ('예체능')




 ---Q13---
SELECT CLASS_NAME ,
       DEPARTMENT_NAME
FROM TB_CLASS
JOIN TB_DEPARTMENT USING (DEPARTMENT_NO)
LEFT JOIN TB_CLASS_PROFESSOR USING (CLASS_NO )
WHERE CATEGORY IN ('예체능')
AND PROFESSOR_NO IS NULL

SELECT CLASS_NO ,
       NVL(PROFESSOR_NO,1)
FROM TB_CLASS_PROFESSOR

---Q14---
SELECT STUDENT_NAME ,
       PROFESSOR_NAME
FROM TB_STUDENT S
FULL JOIN TB_DEPARTMENT D USING (DEPARTMENT_NO)
LEFT JOIN TB_PROFESSOR P ON (P.PROFESSOR_NO = S.COACH_PROFESSOR_NO)
WHERE DEPARTMENT_NAME IN ('서반아어학과')
ORDER BY S.STUDENT_NO

---Q15---
SELECT STUDENT_NO ,
       STUDENT_NAME ,
       DEPARTMENT_NAME ,
       AVG(POINT)
FROM TB_STUDENT S
JOIN TB_DEPARTMENT D USING (DEPARTMENT_NO)
JOIN TB_GRADE G USING (STUDENT_NO)
WHERE ABSENCE_YN IN ('N')
GROUP BY STUDENT_NO ,
       STUDENT_NAME ,
       DEPARTMENT_NAME 
HAVING AVG(POINT)>= 4