---DAY 5

--- DDL ( Data Definition language)
--- create , drop ,alter
--- TABLE (제약조건)
--- CONSTRANINT - PK , FK , NOT NULL , CHECK , UNIQUE

-- PK = NOT NULL  + UNIQUE (NULL 값이 없고 중복되지 않는다.)

--- SYNTAX

/*
CREATE TABLE TABLE_NAME (
   COLUMN_NAME DATATYPE(SIZE) [DEFAULT COLUMN_CONSTRAINT] ,
   COLUMN_NAME DATATYPE [OPTION] ,
   COLUMN_NAME DATATYPE [OPTION] ,
   COLUMN_NAME DATATYPE [OPTION] ,
   [CONSTRANINT ~~~]
)
*/

CREATE TABLE TEST_TBL (
      ID     NUMBER(5) PRIMARY KEY ,
      NAME   VARCHAR2(50) NOT NULL ,
      ADDRESS VARCHAR2(100) ,
      REGDATE DATE DEFAULT SYSDATE
) ;

SELECT *
FROM TEST_TBL

-- 테이블 삭제시
-- DROP TABLE TEST_TBL

-- INSERT , UPDATE , DELETE

/*
INSERT IN TABLE_NAME ([COLUMN LIST]) VALUES (VALUE, VALUE ....)
*/

INSERT INTO TEST_TBL VALUES(100 , 'LDS' , NULL ,NULL) ;
INSERT INTO TEST_TBL (ID , NAME , ADDRESS) VALUES(101 , 'LDS' , NULL) ;

CREATE TABLE TEST_PARENT(
        DEPT_ID   NUMBER(5) PRIMARY KEY ,
        DEPT_NAME VARCHAR2(50) DEFAULT '아무개'
);
INSERT INTO TEST_PARENT VALUES(10 , '섭섭해') ;
INSERT INTO TEST_PARENT VALUES(20 , '임섭순') ;
INSERT INTO TEST_PARENT(DEPT_ID) VALUES(30) ;

CREATE TABLE TEST_CHILD(
        EMP_ID    NUMBER(5)  PRIMARY KEY , 
        DEPT_ID   NUMBER(5)  REFERENCES TEST_PARENT(DEPT_ID) ,
        SALARY    NUMBER(10) CHECK (SALARY > 0 )
);    
INSERT INTO TEST_CHILD VALUES(100 , NULL , 1000000) ;
INSERT INTO TEST_CHILD (EMP_ID, SALARY) VALUES(200, 1000000) ;
INSERT INTO TEST_CHILD (EMP_ID, SALARY) VALUES(300, -1000000) ;

SELECT *
FROM TEST_CHILD



CREATE TABLE TEST_PARENT2(
        DEPT_ID   NUMBER(5) ,
        DEPT_NAME VARCHAR2(50),
        PRIMARY KEY(DEPT_ID , DEPT_NAME)
        ) ;

INSERT INTO TEST_PARENT2 VALUES(10 , '섭섭해') ;
INSERT INTO TEST_PARENT2 VALUES(10 , '임섭순') ;

SELECT *
FROM TEST_PARENT2



CREATE TABLE TEST_CHILD2(
        EMP_ID    NUMBER(5)  PRIMARY KEY , 
        DEPT_ID   NUMBER(5)  ,
        DEPT_NAME VARCHAR(50) ,
        SALARY    NUMBER(10) CHECK (SALARY > 0 ) ,
        FOREIGN KEY (DEPT_ID, DEPT_NAME) REFERENCES TEST_PARENT2(DEPT_ID , DEPT_NAME)
        );
        
INSERT INTO TEST_CHILD2 VALUES(100 , '10' , '섭섭해' ,10000) ;
INSERT INTO TEST_CHILD2 VALUES(200 , '10' , '임섭순' ,10000) ;

SELECT *
FROM TEST_CHILD2


-- 테이블레벨의 제약은 NOT NULL 을 제외하고 모두 가능하다.

CREATE TABLE TEST_CHILD3(
        EMP_ID    NUMBER(5) , 
        DEPT_ID   NUMBER(5)  ,
        DEPT_NAME VARCHAR(50) ,
        SALARY    NUMBER(10) CHECK (SALARY > 0 ) ,
        FOREIGN KEY (DEPT_ID, DEPT_NAME) REFERENCES TEST_PARENT2(DEPT_ID , DEPT_NAME) ,
        PRIMARY KEY (EMP_ID , DEPT_ID , DEPT_NAME)
        );
        
INSERT INTO TEST_CHILD3 VALUES(100 , '10' , '임섭순' ,10000) ;
INSERT INTO TEST_CHILD3 VALUES(200 , '10' , '임섭순' ,10000) ;

SELECT *
FROM TEST_CHILD3

--CREATE 구문에 서브쿼리 사용이 가능하다
/*
CREATE TABLE TABLE_NAME
AS SUBQUERY ;
*/

CREATE TABLE TEST_SUBQUERY
AS SELECT EMP_ID , EMP_NAME
   FROM EMPLOYEE ;
   
SELECT *
FROM TEST_SUBQUERY ;


CREATE TABLE TEST_SUBQUERY2 (ID,NAME,BONUS )
AS SELECT EMP_ID , EMP_NAME , NVL(BONUS_PCT , 0)
   FROM EMPLOYEE ;
   
SELECT *
FROM TEST_SUBQUERY2

--VIEW (VIRTUAL TABLE)
--DML 작업 불가

/*
CEATE OR REPLACE VIEW [VIEW_NAME]
AS SUBQUERY ;
*/

CREATE OR REPLACE VIEW DEPT90
AS SELECT EMP_ID , EMP_NAME , EMAIL , JOB_ID , MGR_ID ,DEPT_ID
   FROM EMPLOYEE
   WHERE DEPT_ID = '90' ;

SELECT *
FROM DEPT90 ;


CREATE OR REPLACE VIEW HIREDATE20
AS SELECT HIRE_DATE ,
       TRUNC (MONTHS_BETWEEN(SYSDATE , HIRE_DATE) / 12) AS근속년수
FROM EMPLOYEE
WHERE MONTHS_BETWEEN(SYSDATE , HIRE_DATE) > 240 ;

SELECT *
FROM HIREDATE20

--VIEW DROP
DROP VIEW HIREDATE20 ;

--- TOP-N 분석
--INLINE VIEW (FROM 절에 SUBQUERY) 를 통한 TOP-N 분석
-- 식별해야하는 최상위OR 최하위의 N개의 행 분석

SELECT ROWNUM , ROWID , EMP_ID
FROM EMPLOYEE

--부서별 평균 급여보다 많은 급여를 받는 직원의 이름, 급여를 조회
-- INLINE VIEW
-- FIRST검색 OR 범위검색 가능!

SELECT ROWNUM ,
       EMP_NAME , 
       SALARY 
FROM (SELECT EMP_NAME,
       SALARY
       FROM (SELECT DEPT_ID AS DID,
                    ROUND(AVG(SALARY), -3) AS DAVG
             FROM EMPLOYEE
             GROUP BY DEPT_ID ) V
       JOIN EMPLOYEE E ON(E.DEPT_ID = V.DID)
       WHERE SALARY > V.DAVG 
       ORDER BY 2)  
WHERE ROWNUM <= 5 ;

-- SEQUENCE 시퀀스 - AUTOINCREMENT
/*
-- NEXTVAL , CURRVAL
CREATE SEQUENCE SEQUENCE_NAME ;
[INCREMENT
START WITH
MAXVALUE
MINVALUE
CYCLE
CACHE]
*/

CREATE SEQUENCE TESTSEQ ;
SELECT TESTSEQ .NEXTVAL FROM DUAL ;
SELECT TESTSEQ .CURRVAL FROM DUAL ;

SELECT *
FROM TEST_CHILD3 ;

INSERT INTO TEST_CHILD3 VALUES( TESTSEQ.NEXTVAL ,10,'임섭순' , 2000) ;


-- DML (UPDATE , DELETE)
/*
UPDATE [TABLE_NAME]
SET COLUMN_NAME = VALUE ,COLUMN_NAME = (SUBQUERY), ~~~
WHERE CONDITION ;

DELETE TABLE_NAME
WHERE CONDITION ;
*/

SELECT *
FROM DELETE_TBL ;

DROP TABLE DELETE_TBL

UPDATE DEPARTMENT
SET DEPT_NAME = '전략기획팀'
WHERE DEPT_ID = '30' ;

CREATE TABLE DELETE_TBL
AS ( SELECT *
     FROM DEPARTMENT) 
     
DELETE DELETE_TBL 
WHERE DEPT_ID = 30 ;


---------WORK BOOK-----------
----------------CUSTOMERS TABLE-------------------

CREATE TABLE CUSTOMERS (
      CNO     NUMBER(5) PRIMARY KEY ,
      CNAME   VARCHAR2(10) NOT NULL ,
      ADDRESS VARCHAR2(50) NOT NULL ,
      EMAIL VARCHAR2(20) NOT NULL ,
      PHONE VARCHAR2(20) NOT NULL ) ;

INSERT INTO CUSTOMERS VALUES(101 , '김철수' , '서울 강남구' , 'cskim@naver.com' , '899-6666')
INSERT INTO CUSTOMERS VALUES(102 , '이영희' , '부산 서면' , 'yhlee@empal.com' , '355-8882')
INSERT INTO CUSTOMERS VALUES(103 , '최진국' , '제주 동광양' , 'jkchoi@gmail.com' , '852-5764')
INSERT INTO CUSTOMERS VALUES(104 , '강준호' , '강릉 홍제동' , 'jhkang@hanmail.com' , '559-7777')
INSERT INTO CUSTOMERS VALUES(105 , '민병국' , '대전 전민동' , 'bgmin@hotmail.com' , '559-8741')
INSERT INTO CUSTOMERS VALUES(106 , '오민수' , '광주 북구' , 'msoh@microsoft.com' , '542-9988')

-----------------PRODUCTS TABEL----------------

CREATE TABLE PRODUCTS (
      PNO     NUMBER(5) PRIMARY KEY ,
      PNAME   VARCHAR2(20) NOT NULL ,
      COST NUMBER(8) DEFAULT '0' NOT NULL  ,
      STOCK NUMBER(5) DEFAULT '0' NOT NULL  ) ; 
      
      
INSERT INTO PRODUCTS VALUES(1001 , '삼양라면' , '1000' , '200')
INSERT INTO PRODUCTS VALUES(1002 , '새우깡' , '1500' , '500')
INSERT INTO PRODUCTS VALUES(1003 , '월드콘' , '2000' , '350')
INSERT INTO PRODUCTS VALUES(1004 , '빼빼로' , '2000' , '700')
INSERT INTO PRODUCTS VALUES(1005 , '코카콜라' , '1800' , '550')
INSERT INTO PRODUCTS VALUES(1006 , '환타' , '1600' , '300')

---------------ORDERS TABLE-----------------

CREATE TABLE ORDERS (
      ORDERNO     NUMBER(5) PRIMARY KEY ,
      ORDERDATE DATE DEFAULT SYSDATE NOT NULL,
      ADDRESS VARCHAR2(50) NOT NULL ,
      PHONE VARCHAR2(20) NOT NULL ,
      STATUS VARCHAR2(20) NOT NULL CHECK (STATUS IN ('결제완료','배송중','배송완료')) ,
      CNO NUMBER(5) NOT NULL REFERENCES CUSTOMERS(CNO)     );
      
DROP TABLE ORDERS ;
        
 ORDERDATE   DATE DEFAULT SYSDATE NOT NULL ,        
 STATUS VARCHAR2(20) NOT NULL CHECK IN '결제완료','배송중','배송완료' ,       

SELECT *
FROM ORDERS

--------------ORDERDETAIL TABLE-----------------

CREATE TABLE ORDERDETAIL (
      ORDERNO     NUMBER(10) ,
      PNO NUMBER(5)  ,
      QTY NUMBER(5) DEFAULT '0'  ,
      COST NUMBER(8) DEFAULT '0'  ,
       FOREIGN KEY (ORDERNO) REFERENCES ORDERS(ORDERNO) ,
        FOREIGN KEY (PNO) REFERENCES PRODUCTS(PNO) ,
      PRIMARY KEY (ORDERNO , PNO)
        );
        
DROP TABLE ORDERDETAIL

SELECT *
FROM ORDERDETAIL


---------------Q4-----------------
 INSERT INTO ORDERS VALUES (1, SYSDATE -3  , '서울 강남구' , '899-6666' , '결제완료', 101 )
 
 SELECT *
 FROM ORDERS

INSERT INTO ORDERDETAIL VALUES ( 1 , 1001 , 50 , 1000)      
  
SELECT *
FROM ORDERDETAIL   

-------------Q5----------------

UPDATE PRODUCTS
SET STOCK = '150'
WHERE PNO = '1001' ;

SELECT *
FROM PRODUCTS

----------Q6-----------------
INSERT INTO ORDERS VALUES (2, SYSDATE -2  , '부산 수영구' , '337-5000' , '결제완료', 102 )
 
 SELECT *
 FROM ORDERS

INSERT INTO ORDERDETAIL VALUES ( 2 , 1002 , 100 , 1500)
INSERT INTO ORDERDETAIL VALUES ( 2 , 1003 , 150 , 2000)

SELECT *
FROM ORDERDETAIL

----------Q7--------------
UPDATE PRODUCTS
SET STOCK = '400'
WHERE PNO = '1002' ;

UPDATE PRODUCTS
SET STOCK = '200'
WHERE PNO = '1003' ;

-----------Q8-------------

INSERT INTO ORDERS VALUES (3, SYSDATE -1  , '광주 북구' , '652-2277' , '결제완료', 106 )

INSERT INTO ORDERDETAIL VALUES ( 3 , 1004 , 100 , 2000)
INSERT INTO ORDERDETAIL VALUES ( 3 , 1005 , 50 , 1800)

SELECT *
FROM ORDERS


SELECT *
FROM ORDERDETAIL


---------Q9---------------

UPDATE PRODUCTS
SET STOCK = '600'
WHERE PNO = '1004' ;

UPDATE PRODUCTS
SET STOCK = '500'
WHERE PNO = '1005' ;

SELECT *
FROM PRODUCTS

-----------Q10-----------------
SELECT ORDERDATE ,
       CNAME ,
       O.ADDRESS ,
       O.PHONE ,
       STATUS ,
       PNAME ,
       P.COST ,
       QTY ,
       P.COST*QTY
      
FROM PRODUCTS P
JOIN ORDERDETAIL D ON (P.PNO = D.PNO)
JOIN ORDERS O ON (O.ORDERNO = D.ORDERNO)
JOIN CUSTOMERS C ON (C.CNO = O.CNO)


---------Q11------------------

SELECT ORDERDATE ,
       SUM(COST*QTY)
FROM ORDERS 
JOIN ORDERDETAIL USING (ORDERNO)
GROUP BY ORDERDATE

---------------Q12----------
INSERT INTO PRODUCTS VALUES(1007 , '목캔디' , '3000' , '500')

SELECT *
FROM PRODUCTS

------------Q13----------------


INSERT INTO ORDERS VALUES (4, SYSDATE   , '제주 동광양' , '352-4657' , '결제완료', 103 )
INSERT INTO ORDERDETAIL VALUES ( 4 , 1007 , 200 , 3000)

UPDATE PRODUCTS
SET STOCK = '300'
WHERE PNO = '1007' ;

SELECT ORDERDATE ,
       CNAME ,
       O.ADDRESS ,
       O.PHONE ,
       STATUS ,
       PNAME ,
       P.COST ,
       QTY ,
       P.COST*QTY
      
FROM PRODUCTS P
JOIN ORDERDETAIL D ON (P.PNO = D.PNO)
JOIN ORDERS O ON (O.ORDERNO = D.ORDERNO)
JOIN CUSTOMERS C ON (C.CNO = O.CNO)

-----------------------------------------------------
------------------WORK BOOK -------------------------
-----------------------------------------------------

---Q1---
CREATE TABLE TB_CATEGORY (
              NAME VARCHAR2(10) ,
              USE_YN CHAR(1) DEFAULT 'Y' 
              ) ;
              
---Q2---
CREATE TABLE TB_CLASS_TYPE (
              NO VARCHAR2(5) PRIMARY KEY ,
              NAME VARCHAR2(10) 
              ) ;
              
---Q3---

